// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/seat.proto

package vulcanlabs_assignment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeatReservationService_GetAvailableSeats_FullMethodName = "/SeatReservationService/GetAvailableSeats"
	SeatReservationService_Reserve_FullMethodName           = "/SeatReservationService/Reserve"
	SeatReservationService_GetSeatMap_FullMethodName        = "/SeatReservationService/GetSeatMap"
)

// SeatReservationServiceClient is the client API for SeatReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatReservationServiceClient interface {
	GetAvailableSeats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReserveResponse, error)
	Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error)
	GetSeatMap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SeatMap, error)
}

type seatReservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatReservationServiceClient(cc grpc.ClientConnInterface) SeatReservationServiceClient {
	return &seatReservationServiceClient{cc}
}

func (c *seatReservationServiceClient) GetAvailableSeats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReserveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveResponse)
	err := c.cc.Invoke(ctx, SeatReservationService_GetAvailableSeats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatReservationServiceClient) Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveResponse)
	err := c.cc.Invoke(ctx, SeatReservationService_Reserve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatReservationServiceClient) GetSeatMap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SeatMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeatMap)
	err := c.cc.Invoke(ctx, SeatReservationService_GetSeatMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatReservationServiceServer is the server API for SeatReservationService service.
// All implementations must embed UnimplementedSeatReservationServiceServer
// for forward compatibility.
type SeatReservationServiceServer interface {
	GetAvailableSeats(context.Context, *Empty) (*ReserveResponse, error)
	Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error)
	GetSeatMap(context.Context, *Empty) (*SeatMap, error)
	mustEmbedUnimplementedSeatReservationServiceServer()
}

// UnimplementedSeatReservationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeatReservationServiceServer struct{}

func (UnimplementedSeatReservationServiceServer) GetAvailableSeats(context.Context, *Empty) (*ReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSeats not implemented")
}
func (UnimplementedSeatReservationServiceServer) Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}
func (UnimplementedSeatReservationServiceServer) GetSeatMap(context.Context, *Empty) (*SeatMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatMap not implemented")
}
func (UnimplementedSeatReservationServiceServer) mustEmbedUnimplementedSeatReservationServiceServer() {
}
func (UnimplementedSeatReservationServiceServer) testEmbeddedByValue() {}

// UnsafeSeatReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatReservationServiceServer will
// result in compilation errors.
type UnsafeSeatReservationServiceServer interface {
	mustEmbedUnimplementedSeatReservationServiceServer()
}

func RegisterSeatReservationServiceServer(s grpc.ServiceRegistrar, srv SeatReservationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeatReservationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeatReservationService_ServiceDesc, srv)
}

func _SeatReservationService_GetAvailableSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatReservationServiceServer).GetAvailableSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatReservationService_GetAvailableSeats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatReservationServiceServer).GetAvailableSeats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatReservationService_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatReservationServiceServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatReservationService_Reserve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatReservationServiceServer).Reserve(ctx, req.(*ReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatReservationService_GetSeatMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatReservationServiceServer).GetSeatMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatReservationService_GetSeatMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatReservationServiceServer).GetSeatMap(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatReservationService_ServiceDesc is the grpc.ServiceDesc for SeatReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SeatReservationService",
	HandlerType: (*SeatReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableSeats",
			Handler:    _SeatReservationService_GetAvailableSeats_Handler,
		},
		{
			MethodName: "Reserve",
			Handler:    _SeatReservationService_Reserve_Handler,
		},
		{
			MethodName: "GetSeatMap",
			Handler:    _SeatReservationService_GetSeatMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/seat.proto",
}
